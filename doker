#!/bin/bash

DIR_COMPOSE=~/workspace/docker/stacks
DIR_DOCKERFILES=~/workspace/docker/dockerfiles

#=========================
# start stacku
# $1 - nazev stacku = adresare
# $2 - jestli na pozadi ci nikoliv. prazdno = PWD a $1 = $2
#=========================
function start_service {
	if [ -z "$2" ]; then
		internal_start_service "$PWD" $1
	else
		internal_start_service "$DIR_COMPOSE/$1" $2
	fi
}

#=========================
# start stacku
# $1 - adresar
# $2 - jestli na pozadi ci nikoliv
#=========================
function internal_start_service {
	local directory="$1"
	local cmd="docker compose -f docker-compose.yml"
	if [ -f "$directory/dockercompose-dev.yml" ] ; then
		cmd="$cmd -f docker-compose-dev.yml"
	fi

	if [ -f "$directory/docker-sync.yml" ] ; then
		cmd="docker-sync start && $cmd"
	fi
	
	cmd="$cmd up"
	
	if [ "$2" = true ]; then
		cmd="$cmd -d"
	fi

	cd ${directory}
	eval ${cmd}
}

#=========================
# stop stacku
# $1 - nazev stacku = adresare. prazdno = $PWD
function stop_service {
	if [ -z "$1" ]; then
		internal_stop_service "$PWD"
	else
		internal_stop_service "$DIR_COMPOSE/$1"
	fi
}

#=========================
# zastavit stack
# $1 nazev stacku = adresare
#=========================
function internal_stop_service {
	local directory=$1
	local cmd="docker compose -f docker-compose.yml"
	if [ -f "$directory/docker-compose-dev.yml" ] ; then
		cmd="$cmd -f docker-compose-dev.yml"
	fi
	if [ -f "$directory/docker-sync.yml" ] ; then
		cmd="docker-sync stop && $cmd"
	fi
	
	cmd="$cmd stop"

	cd ${directory}
	eval ${cmd}
}

#=========================
# aktualizovat image
# pomoci pull nebo build
# $1 nazev stacku = adresare
#=========================
function update_stack {
	if [ -z "$1" ]; then
		internal_update_stack "$PWD"
	else
		internal_update_stack "$DIR_COMPOSE/$1"
	fi
}

#=========================
# aktualizovat image z docker-compose.yml
# $1 adresar adresare
#=========================
function internal_update_stack {
	local directory=$1
	cd ${directory}
	docker compose pull
	docker compose build --pull
}

#=========================
# vyhledat bezici kontejner
# pokud nenajde, exit 1.
# $1 nazev image
#=========================
function search_image {
  local out="$(docker images -q $1)"
	echo ${out}
}

#=========================
# najde nazev dle id
# $1 id kontejneru
#=========================
function get_container_name {
	echo "$(docker inspect $1 -f {{.Name}})"
}

#=========================
# skocit bashem do kontejneru
# $1 - nazev kontejneru
# $2 - sh nebo bash
#=========================
function shell_into {
	if [ -z "$1" ]; then
		echo "Zadej nazev kontejneru"
		exit 1
	fi
	echo "jdu do kontejneru ${name}"
	docker exec -it $1 $2
}

#=========================
# Pustit bash nebo sh v kontejneru dle docker-compose
# $1 - nazev kontejneru
# $2 - bash nebo sh
#=========================
function compose_shell {
  docker compose exec $1 $2
}


#=========================
# priakz v kontejneru dle docker-compose
# $1 - nazev kontejneru
# $2 a dal - prikaz
#=========================
function compose_exec {
  docker compose exec \
    --user=$(id -u):$(id -g) \
    $1 ${@:2}
}

#=========================
# Pustit composer prikaz, ale na lokalnim kontejneru dle jmena z docker-compose
# $1 - bool pouzit composer.local.json?
#=========================
function compose_composer {
  composerFile="composer.json"
  if [ "$1" = true ]; then
    composerFile="composer.local.json"
  fi

  docker compose run --rm \
		  -v "$PWD":/var/www/html \
		  -v /dev/null:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
		  -v $HOME/.composer:/.composer \
		  --user=$(id -u):$(id -g) \
		  -e COMPOSER=${composerFile} \
		  --use-aliases \
		  php \
		  php composer.phar "${@:2}"
}

#=========================
# pusti code sniffer na kontejneru z docker-compose.yml
# #1 - nazev service z docker-compose.yml
# $2 - nazev nais modulu v nais_modules
#=========================
function compose_code_sniffer {
  if [ -z "$1" ]; then
      dir="."
    else
      dir="$1"
    fi
		docker compose run --rm -it \
		  -v /dev/null:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
		  php \
		  vendor/bin/phpcs --standard=vendor/movisio/nais-cs/config/ruleset.xml ${dir} -v ${@:2}
}

#=========================
# pusti phinx jako compose
# $1 - nazev service z docker-compose.yml
#=========================
function phinx_compose {
  docker compose run --rm -it \
      --user=$(id -u):$(id -g) \
		  php \
		  php ./phinx.php "${@:1}"
}

#=========================
# pusti npm
#=========================
function npm {
  docker run --rm -it \
      --user=$(id -u):$(id -g) \
		  -v $HOME/.npm:/cache/npm \
		  -v "$PWD":/app \
		  -w="/app" \
		  --network=dev \
		  node:18 \
		  npm "$@"
}

#=========================
# zbuildi image
#=========================
function build {
  if [ -z "$1" ]; then
		docker build "$PWD"
	else
		docker build "$DIR_DOCKERFILES/$1" -t "local/$1:latest"
	fi
}

#=========================
# pusti deployer
#=========================
function deployer {
  local iid="$(search_image local/deployer)"
  if [ -z "$iid" ]; then
    $(build deployer)
  fi

  docker run --rm -it \
  -v "$PWD":/project \
  -v "$HOME/.ssh":/tmp/.ssh:ro \
  local/deployer \
  "$@"
}



#==============================================================================

case $1 in
	"start")
		start_service $2 true
	;;
	"startf")
		start_service $2 false
	;;
	"stop")
		stop_service $2
	;;
	"bash")
		shell_into $2 bash
	;;
	"sh")
		shell_into $2 sh
	;;
	"update")
		update_stack $2
	;;
	"c")
		compose_composer false "${@:2}" # pouziti 'cc <nazev service z docker-compose.yml> <prikaz composeru>', pr. "doker cc rmm_php update"
	;;
	"cl")
		compose_composer true "${@:2}"
	;;
	"cs")
		compose_code_sniffer ${@:2}
	;;
	"phinx")
		phinx_compose "${@:2}"
	;;
	"npm")
		npm "${@:2}"
	;;
  "build")
    build $2
  ;;
  "dep")
    deployer "${@:2}"
  ;;
  "cb")
    compose_shell $2 bash
  ;;
  "csh")
    compose_shell $2 sh
  ;;
  "e")
    compose_exec "${@:2}"
  ;;
	"h")
	echo "parametry:"
	echo "start <stack>               nastartuje docker compose na pozadi"
	echo "startf <stack>              nastartuje docker compose na popredi"
	echo "stop <stack>                zastavi docker compose"
	echo "update <stack>              aktualizuje image ve stacku"
	echo "bash <container_name>       prejde do shellu (bash) v kontejneru"
	echo "sh <container_name>         prejde do shellu (sh) v kontejneru"
	echo "c <cmd>                     spusti php composer.phar <cmd>, composer.json v docker-compose service php"
	echo "cl <cmd>                    spusti php composer.phar <cmd>, composer.local.json v docker-compose service php"
	echo "cs <adresar>                spusti phpcs bud v aktualnim adresari  nebo v <adresar>, service php dle docker-compose.yml"
	echo "phinx <command>             spusti phinx v service php dle docker-compose.yml, napr 'doker phinx migrate' nebo 'doker phinx create Migration Module'"
	echo "npm <command>               spusti NPM, napr. 'doker npm install' nebo 'doker npm run dev'"
	echo "cb <command>                prejde do shellu (bash) podle docker-compose.yml"
  echo "csh <command>               prejde do shellu (sh) podle docker-compose.yml"
  echo "e <command>                 pusti prikaz v kontejneru dle docker-compose.yml"
	;;
	*)
	docker "$@"
	;;
esac
